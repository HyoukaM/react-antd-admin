{"version":3,"sources":["serviceWorker.ts","utils/core.tsx","layout/UserLayout.tsx","utils/util.ts","components/slideBar/SlideBar.tsx","components/icon/Icon.tsx","components/header/AvatarDropdown.tsx","components/header/Header.tsx","utils/fullScreen.ts","components/fullScreenIcon/FullScreenIcon.tsx","components/breadcrumb/Breadcrumb.tsx","layout/BasicLayout.tsx","views/login/Login.tsx","views/dashboard/components/CarTabs.tsx","views/dashboard/Dashboard.tsx","api/chartsApi.ts","views/404/NotFound.tsx","router/routes.ts","index.tsx","api/login.ts","models/login.ts","api/basicApi.ts","models/global.ts","utils/storageUtil.ts","utils/history.ts"],"names":["Boolean","window","location","hostname","match","hyoukaRouterPath","createRoute","routeConfig","path","Com","component","redirect","meta","arg","icon","_","isArray","children","map","route","unshift","to","from","key","exact","random","render","title","prop","document","renderChildren","Content","UserLayout","className","pathToRegexp","require","getMenuMathKeys","menu","filter","item","test","Sider","SubMenu","Item","RenderingIcon","indexOf","src","alt","font","antd","type","SlideBar","classname","classnames","collapsed","themeClass","flatMenu","currentMenu","useState","openKeys","setOpenKeys","selectedKeys","selectKeys","pathname","getMenuSelectKeys","menuProps","useEffect","parentPath","width","trigger","mode","onOpenChange","keys","handlerOpenKeys","getNavMenuItem","menuList","getSubMenuOrItem","menuItem","length","replace","conversionPath","href","getMenuPath","hidden","Icon","props","prefixClass","spin","argument","dangerouslySetInnerHTML","__html","antdClass","Icons","BorderOutlined","React","isValidElement","Divider","AvatarDropdown","dispatch","avatarName","getStorage","menuDropdown","onClick","UserOutlined","GithubOutlined","LogoutOutlined","overlay","size","GlobalHeader","setCollapsed","fullscreen","setFullscreen","onfullscreenchange","fullscreenElement","Breadcrumb","element","documentElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullscreen","webkitRequestFullScreen","FullScreenIcon","FullscreenExitOutlined","FullscreenOutlined","BreadcrumbAvatar","currentRoute","setCurrentRoute","pathName","orderPath","split","reduce","prev","next","join","push","getRouterPath","Header","connect","global","login","asyncMenu","collapsedLeftSide","history","useHistory","roles","leftSide","navBar","theme","layout","style","overflow","SwitchTransition","CSSTransition","classNames","timeout","formLogin","loading","setLoading","tip","spinning","onFinish","values","payload","name","rules","required","message","prefix","placeholder","LockOutlined","valuePropName","noStyle","htmlType","TabPane","CarTabs","tabPaneList","tabBarExtraContent","tab","child","dashboardArrayList","span","iconType","value","Math","floor","columnConfig","visible","text","fontSize","padding","xField","xAxis","yAxis","yField","data","sales","forceFit","display","height","money","flex","picker","defaultValue","moment","Date","Dashboard","lineData","setLineData","Promise","resolver","scales","then","res","config","gutter","index","marginLeft","NotFound","status","subTitle","extra","asyncRoute","Login","BasicLayout","routerConfig","routes","routesItem","p","n","concat","createRouter","app","dva","model","default","router","locale","createRoutes","start","navigator","serviceWorker","ready","registration","unregister","catch","error","console","LoginApi","resolve","reject","loginModel","namespace","state","username","password","remember","undefined","effects","put","call","response","Object","setStorage","Logout","clearStotage","reducers","changeState","getMenu","getFlatMenu","forEach","loopPath","loopMenu","parentItem","changeMenu","localStorage","setItem","getItem","clear","options","basename","routerBase","createHashHistory"],"mappings":"iMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDCdNH,OAAOI,iBAAmB,GAU1B,IAAMC,EAAc,SAAdA,EAAeC,GAA2B,IAAD,EACkBA,IAAtDC,EADoC,EACpCA,KAAiBC,EADmB,EAC9BC,UAAgBC,EADc,EACdA,SAAUC,EADI,EACJA,KAAeC,GADX,EACEC,KADF,8DAEvCN,GAAiB,MAATA,IACRP,OAAOI,iBAAiBG,GAAxB,aAAiCA,OAAMI,QAASC,IAGhDF,GAAYI,IAAEC,QAAQH,EAAII,YAC1BJ,EAAII,SAAWJ,EAAII,SAASC,KAAI,SAACC,GAC7B,OAAOb,GAAY,kBAAMa,QAE7BN,EAAII,SAASG,QACT,kBAAC,IAAD,CAAUC,GAAIV,EAAUW,KAAMd,EAAMe,IAAG,UAAKf,EAAL,aAAsBgB,OAAK,MAG1E,IAAML,EAAQ,CACVI,IAAKf,GAAQO,IAAEU,SACfC,OAAQ,YAAgB,IAxBNC,EAwBLC,EAAU,oBAEnB,OA1BcD,EAyBGf,EAAKe,MAxB9BE,SAASF,MAAT,iBAA2BA,GAyBX,kBAAClB,EAAD,eAAKqB,eAAgBjB,GAASe,MAG9C,OAAO,kBAAC,IAAD,eAAOpB,KAAMA,GAAUW,K,0BC7B3BY,G,WAAAA,SAcQC,EAZqC,SAACJ,GAAU,IAEpDX,EADkBW,EAAlBE,eACAb,SACP,OACI,uBAAQgB,UAAU,iCACd,kBAACF,EAAD,KACI,kBAAC,IAAD,KAASd,M,gFCdlBiB,G,OAAgBC,EAAQ,KAAxBD,cAeA,SAASE,EAAiBC,EAAuB7B,GACpD,OAAO6B,EAAKC,QAAO,SAAAC,GACf,OAAOL,EAAaK,EAAK/B,MAAMgC,KAAKhC,M,ICTrCiC,E,IAAAA,MAEAC,E,IAAAA,QAASC,E,IAAAA,KAcVC,EAAgB,SAAC9B,GACnB,MAAoB,kBAATA,GAA8C,IAAzBA,EAAK+B,QAAQ,QAErC,yBAAKC,IAAKhC,EAAMiC,IAAI,eAAKd,UAAU,wBAGvB,kBAATnB,EAEH,kBAAC,EAAD,CAAMkC,KAAK,OAAOC,KAAK,OAAOC,KAAMpC,IAGrCA,GAoHIqC,EAjHkD,SAACvB,GAE9D,IAAMwB,EAAYC,IAAW,eAAgB,mBACtChB,EAAgET,EAAhES,KAAMiB,EAA0D1B,EAA1D0B,UAAWC,EAA+C3B,EAA/C2B,WAAYrD,EAAmC0B,EAAnC1B,SAAUsD,EAAyB5B,EAAzB4B,SAAUC,EAAe7B,EAAf6B,YAHe,EAIvCC,mBAA+B,IAJQ,mBAIhEC,EAJgE,KAItDC,EAJsD,KAKjEC,EDtBH,SAA4BxB,EAAuBnC,GACtD,IACM4D,EAAa1B,EAAgBC,EADtBnC,EAAS6D,UACyB,GAC/C,OAAOD,EAAa,CAACA,EAAWtD,MAAQ,GCmBnBwD,CAAkBR,EAAUtD,GAE3C+D,EAAYX,EAAY,CAACO,gBAAgB,CAACA,eAAcF,YAuG9D,OA7BAO,qBAAU,WACNN,EAAYH,EAAcA,EAAYU,WAAa,MACpD,CAACV,IAGA,kBAAChB,EAAD,CAAO2B,MAAO,IACPnC,UAAWmB,EACXiB,QAAS,KACTf,UAAWA,GAEd,yBAAKrB,UAAU,oBACX,8BACI,yBAAKa,IAAI,+DAA+DC,IAAI,KAExEO,EAAY,KAAO,8CAI/B,yBAAKrB,UAAU,wBACX,qCAAMqC,KAAK,SACLC,aAAc,SAAAC,GAAI,OAvBZ,SAACb,GACrBC,EAAYD,GAsBwBc,CAAgBD,IACtCvC,UAAS,mBAAcsB,IACnBU,GAxEC,SAAjBS,EAAkBC,GACpB,IAAKA,EACD,MAAO,GAMX,IAAMC,EAAmB,SAACC,GACtB,OAAIA,EAAS5D,UAAY4D,EAAS5D,SAAS6D,OAAS,EAC5CJ,EAAeG,EAAS5D,WAAayD,EAAeG,EAAS5D,UAAU6D,OAAS,EAE5E,kBAACpC,EAAD,CAASf,MACLkD,EAAS/D,KAED,8BACK8B,EAAciC,EAAS/D,MACxB,8BAAO+D,EAASjE,KAAKe,QAIzBkD,EAASjE,KAAKe,MAGjBJ,IAAKsD,EAASrE,MAElBkE,EAAeG,EAAS5D,gBAhBrC,EAsBI,kBAAC0B,EAAD,CAAMpB,IAAKsD,EAASrE,MAtDhB,SAACW,GACjB,IAAMX,ED9CP,SAAyBA,GAC5B,OAAIA,GAAiC,IAAzBA,EAAKqC,QAAQ,QACdrC,EAEA,WAAIA,GAAQ,IAAKuE,QAAQ,OAAQ,KAAKA,QAAQ,YAAa,IC0CrDC,CAAe7D,EAAMX,MAC5BM,EAAO8B,EAAczB,EAAML,MAC1BF,EAAQO,EAARP,KACP,MAAI,eAAe4B,KAAKhC,GAEhB,uBAAGyE,KAAMzE,GACJM,EACD,8BAAOF,EAAKe,QAKpB,kBAAC,IAAD,CAAMN,GAAIb,EACJuE,QAASvE,IAASN,EAAS6D,UAE5BjD,EACD,8BAAOF,EAAKe,QAsCHuD,CAAYL,KAM7B,OAAOF,EACFrC,QAAO,SAACuC,GAAD,OAAwBA,EAASjE,KAAKe,QAAUkD,EAASM,UAChEjE,KAAI,SAAC2D,GACF,OAAOD,EAAiBC,MAE3BvC,QAAO,SAAAC,GAAI,OAAIA,KA8BPmC,CAAerC,O,2BCrFrB+C,EA5CkB,SAACC,GAAW,IAAD,EACjCC,EAAyED,EAAzEC,YAAapC,EAA4DmC,EAA5DnC,KAAMjB,EAAsDoD,EAAtDpD,UAAWhB,EAA2CoE,EAA3CpE,SAAU+B,EAAiCqC,EAAjCrC,KAAMC,EAA2BoC,EAA3BpC,KAAMsC,EAAqBF,EAArBE,KAASC,EAD5B,YACwCH,EADxC,oEAElCjC,EAAYC,IACdiC,GADwB,mBAGnBtC,EAAOA,GAHY,wBAIhBA,EAJgB,YAIRE,GAASF,GAAQE,GAJT,qBAKpBqC,GALoB,GAOxBtD,GAEJ,GAAI,WAAWO,KAAKU,GAChB,OACI,qCACIjB,UAAWmB,GACPiC,EAFR,CAGII,wBAAyB,CAAEC,OAAQxC,MAI/C,GAAGD,EAAM,CACL,IAAM0C,EAAYtC,IAAWiC,EAAarD,GAC1C,GAAoB,kBAATiB,EAAmB,CAC1B,IAAM0C,EAAQzD,EAAQ,KAAqBe,IAAS2C,IACpD,OAAO,kBAACD,EAAD,eAAO3D,UAAW0D,EAAWJ,KAAMA,GAAUF,IAExD,GAAGS,IAAMC,eAAe7C,GACpB,OACI,kBAAC,IAAD,eACIxC,UAAW,kBAAMwC,GACjBjB,UAAW0D,EACXJ,KAAMA,GACFF,IAKpB,OACI,qCAAGpD,UAAWA,GAAeuD,GACxBvE,I,wFC9CN0B,E,IAAAA,KAAMqD,E,IAAAA,QA+CEC,EA7CwC,SAACrE,GAAU,IACvDsE,EAAYtE,EAAZsE,SAEDC,EAAaC,YAAW,SAExBC,EACF,uBAAMC,QAAS,YACX,OADsB,EAAT/E,KAET,IAAK,SAID,OAHA2E,EAAS,CACLhD,KAAM,kBAEH,EACX,QACI,OAAO,KAGf,kBAAC,EAAD,CAAM3B,IAAI,UACN,kBAACgF,EAAA,EAAD,MADJ,4BAIA,kBAAC,EAAD,CAAMhF,IAAI,UACN,kBAACiF,EAAA,EAAD,MADJ,sBAIA,kBAACR,EAAD,MACA,kBAAC,EAAD,CAAMzE,IAAI,UACN,kBAACkF,EAAA,EAAD,MADJ,6BAOR,OACI,uBAAUC,QAASL,EAAcpE,UAAU,mBACvC,0BAAMA,UAAU,0BACZ,uBAAQ0E,KAAK,QAAQ1E,UAAU,yBAAyBa,IAAI,+DAA+DC,IAAI,iBAC/H,8BACKoD,MCjCrB,IAgCeS,EAhCkC,SAAChF,GAAU,IACjDiF,EAA+CjF,EAA/CiF,aAAcvD,EAAiC1B,EAAjC0B,UAAW4C,EAAsBtE,EAAtBsE,SAAUhG,EAAY0B,EAAZ1B,SACpCkD,EAAYC,IAAW,cAF0B,EAGnBK,oBAAkB,GAHC,mBAGhDoD,EAHgD,KAGpCC,EAHoC,KASvD,OALA7C,qBAAU,WACNrC,SAASmF,mBAAqB,WAC1BD,IAAgBlF,SAASoF,sBAE9B,IAEC,yBAAKhF,UAAWmB,GAEZ,0BAAMnB,UAAU,qBAAqBqE,QAASO,GAC1C,kBAAC,EAAD,CAAM3D,KAAMI,EAAY,qBAAuB,mBAAoBL,KAAK,OAAOD,KAAK,MAGxF,kBAACkE,GAAD,CAAYhH,SAAUA,IAEtB,yBAAK+B,UAAU,oBACX,0BAAMA,UAAU,yCACVqE,QAAS,WClCxB,IAA0Ba,IDmCUtF,SAASuF,gBClC3CvF,SAASoF,kBAUHpF,SAASoF,oBACZpF,SAASwF,eACTxF,SAASwF,iBACDxF,SAAiByF,iBACxBzF,SAAiByF,mBACVzF,SAAiB0F,oBACxB1F,SAAiB0F,sBACV1F,SAAiB2F,sBACxB3F,SAAiB2F,wBAjBlBL,EAAQM,kBACRN,EAAQM,oBACDN,EAAQO,qBACfP,EAAQO,uBACDP,EAAQQ,oBACfR,EAAQQ,sBACDR,EAAQS,yBACfT,EAAQU,0BD2BMd,GAAelF,SAASoF,qBAG/B,kBAAC,EAAD,CAAgBH,WAAYA,KAE/B,kBAAC,EAAD,CAAgBZ,SAAUA,O,6CEnB3B4B,EAdsC,SAAClG,GAGlD,OAFqBA,EAAdkF,WAIF,uBAASnF,MAAM,4BACZ,kBAACoG,EAAA,EAAD,OAGH,uBAASpG,MAAM,gBACZ,kBAACqG,EAAA,EAAD,Q,8BCdLrF,G,KAAAA,KAcP,IAoCesF,GApC2C,SAACrG,GAAU,IAC1D1B,EAAY0B,EAAZ1B,SADyD,EAExBwD,mBAAqB,IAFG,mBAEzDwE,EAFyD,KAE3CC,EAF2C,KAMhE,OAHAjE,qBAAU,WACNiE,EAhBR,SAAuBC,GACnB,IAAMC,EAA2B,GAMjC,OALAD,EAASE,MAAM,KAAKC,QAAO,SAACC,EAAcC,GACtC,IAAMjI,EAAO,CAACgI,EAAMC,GAAMC,KAAK,KAE/B,OADAL,EAAUM,KAAKnI,GACRA,KAEJ6H,EACFnH,KAAI,SAAAqB,GAAI,OAAItC,OAAOI,iBAAiBkC,MACpCD,QAAO,SAAAC,GAAI,OAAIA,KAOAqG,CAAc1I,EAAS6D,aACzC,CAAC7D,IAEA,6BAEQgI,EAAapD,OAGL,4BACI,kBAAC,GAAD,KACI,kBAAC,IAAD,CAAMzD,GAAG,KAAT,iBAKA6G,EAAahH,KAAI,SAACqB,GAAD,OACb,kBAAC,GAAD,CAAMhB,IAAKgB,EAAK/B,MACZ,8BACK+B,EAAK3B,KAAKe,YAQnC,O,qBCnCZI,I,WAAAA,SAAS8G,G,IAAAA,OA6FDC,uBAAQ,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,MAAV,oBACnB3G,KAAM0G,EAAOE,UACbD,SACGD,KAHQD,EA7EwD,SAAClH,GAAU,IACvE1B,EAAsD0B,EAAtD1B,SAAU4B,EAA4CF,EAA5CE,eAAgBoE,EAA4BtE,EAA5BsE,SAAU7D,EAAkBT,EAAlBS,KAAMmB,EAAY5B,EAAZ4B,SAC1CvC,EAAYa,EAAZb,SAFsE,EAGnCyC,oBAAkB,GAHiB,mBAGtEwF,EAHsE,KAGnDrC,EAHmD,KAIvEsC,EAAUC,cAJ6D,EAK7D1F,mBAA2B0C,YAAW,UAA/CiD,EALsE,sBAM7D3F,mBAAQ,aACpB4F,SAAU,WACVC,OAAQ,SACLnD,YAAW,WAHXoD,EANsE,oBAWvEpG,EAAYC,IAAW,eAAgB,cAAe,CACxD,MAASmG,EAAMC,SAAoD,IAA1CD,EAAMC,OAAO5G,QAAQ,gBAC9C,eAAgB2G,EAAMC,SAAmD,IAAzCD,EAAMC,OAAO5G,QAAQ,eACrD,oBAAqB2G,EAAMC,SAAwD,IAA9CD,EAAMC,OAAO5G,QAAQ,oBAC1D,oBAAqB2G,EAAMC,SAAwD,IAA9CD,EAAMC,OAAO5G,QAAQ,sBA4B9D,OAtBAqB,qBAAU,WAEGmF,GACDF,EAAQR,KAAK,CACT5E,SAAU,gBAKjByF,EAAMC,SACPD,EAAMC,OAAS,CACX,cACA,eACA,qBAIRvD,EAAS,CACLhD,KAAM,qBAEX,CAACmG,EAAOF,EAASK,EAAOtD,IAGvB,uBAAQjE,UAAWmB,GAEf,2BAEI,kBAAC,EAAD,CAAUE,UAAW4F,EAAmBzF,YA9BzCrB,EAAgBoB,EAAUtD,EAAS6D,UAAU,GA8B2BP,SAAUA,EAAUnB,KAAMA,EAAMnC,SAAUA,EAAUqD,WAAYiG,EAAMF,SAAUJ,kBAAmBA,IAE1K,kBAAC,GAAD,CAASQ,MAAO,CAACC,SAAU,WAEvB,uBAAQ1H,UAAU,eAEd,kBAAC,GAAD,KACI,kBAAC,EAAD,CAAc/B,SAAUA,EAAUgG,SAAUA,EAAU5C,UAAW4F,EAAmBrC,aAAc,WAAOA,GAAcqC,OAG3H,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACItI,IAAKrB,EAAS6D,SACd+F,WAAW,OACXC,QAAS,KAET,kBAAC,GAAD,CAAS9H,UAAU,eACf,kBAAC,IAAD,CAAQ/B,SAAUA,GAAWe,a,yKC/E1Dc,G,IAAAA,QACAY,G,KAAAA,KA0DQmG,uBACX,kBAA4B,CACxBkB,UADJ,EAAEhB,SADSF,EAxD6C,SAACzD,GAAW,IAAD,EACrC3B,oBAAkB,GADmB,mBAC5DuG,EAD4D,KACnDC,EADmD,KAUnE,OACI,uBAAQjI,UAAU,0BACd,kBAAC,GAAD,KACI,wBAAMkI,IAAI,wBAASC,SAAUH,GACzB,wBAAMhI,UAAU,aAAaoI,SAZvB,SAACC,IAEnBpE,EADmBb,EAAZa,UACE,CACLhD,KAAM,cACNqH,QAAQ,eAAKD,KAEjBJ,GAAW,KAOK,yBAAKjI,UAAU,YACX,yBAAKa,IAAI,+DAA+DC,IAAI,SAC5E,qCACA,mCACA,wCAEJ,kBAAC,GAAD,CAAMyH,KAAK,WAAWC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,6EACpD,wBACIhE,KAAK,QACLiE,OAAQ,kBAACrE,EAAA,EAAD,MACRsE,YAAY,wBAGpB,kBAAC,GAAD,CAAML,KAAK,WAAWC,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,uEACpD,wBACIhE,KAAK,QACLiE,OAAQ,kBAACE,GAAA,EAAD,MACR5H,KAAK,WACL2H,YAAY,kBAGpB,kBAAC,GAAD,CAAML,KAAK,WAAWO,cAAc,UAAUC,SAAO,GACjD,mDAEJ,uBAAG/I,UAAU,oBAAoBgD,KAAK,KAAtC,4BAGA,kBAAC,GAAD,KACI,wBAAQ0B,KAAK,QAAQ1E,UAAU,oBAAoBiB,KAAM,UAAW+H,SAAU,UAA9E,iBAIJ,yBAAKhJ,UAAU,YAAf,2BACQ,uBAAGgD,KAAK,KAAR,oC,gOC/DxBiG,G,KAAAA,QAiCOC,GApBwB,SAAC9F,GAAW,IACxC+F,EAAmC/F,EAAnC+F,YAAaC,EAAsBhG,EAAtBgG,mBAEpB,OACI,wBAAMA,mBAAoBA,GAElBD,EACMA,EAAYlK,KAAI,SAAAqB,GACd,OACI,kBAAC2I,GAAD,CAAS3J,IAAKgB,EAAKhB,IAAK+J,IAAK/I,EAAK+I,KAC7B/I,EAAKgJ,UAIhB,KCrBhBC,GAAqB,CACvB,CACIC,KAAM,2BACNC,SAAU,qBACVC,MAAOC,KAAKC,MAAsB,IAAhBD,KAAKnK,WAE3B,CACIgK,KAAM,2BACNC,SAAU,qBACVC,MAAOC,KAAKC,MAAsB,IAAhBD,KAAKnK,WAE3B,CACIgK,KAAM,2BACNC,SAAU,qBACVC,MAAOC,KAAKC,MAAsB,IAAhBD,KAAKnK,WAE3B,CACIgK,KAAM,2BACNC,SAAU,qBACVC,MAAOC,KAAKC,MAAsB,IAAhBD,KAAKnK,YA0EzBqK,GAA6B,CAC/BnK,MAAO,CACHoK,SAAS,EACTC,KAAM,2BACNtC,MAAO,CACHuC,SAAU,KAGlBC,QAAS,OACTC,OAAQ,OACRC,MAAO,CACHzK,MAAO,CACHoK,SAAS,IAGjBM,MAAO,CACH1K,MAAO,CACHoK,SAAS,IAGjBO,OAAQ,QACRC,KAxDe,CACf,CACIrJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,KAEX,CACItJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,IAEX,CACItJ,KAAM,2BACNsJ,MAAO,KA0BXC,UAAU,GAGR/C,GAAQ,CACVgD,QAAS,OACT,iBAAkB,SAClBC,OAAQ,QAGNvB,GAAc,CAChB,CACIE,IAAK,qBACL/J,IAAK,EACLgK,MACI,4BACI,wBAAKE,KAAM,IACP,kBAAC,KAAWK,KAEhB,wBAAKL,KAAM,GACP,yBAAK/B,MAAOA,IACR,wBAAIA,MAAK,2BAAMA,IAAN,IAAa,UAAa,aAhHzC,CACd,CACI/H,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,YAEX,CACIjL,MAAO,iCACPiL,MAAO,aAmF2B1L,KAAI,SAAAqB,GACV,OACI,wBAAImH,MAAO,CAACmD,KAAM,IACd,8BACKtK,EAAKZ,OAEN,8BACCY,EAAKqK,gBAYlD,CACItB,IAAK,qBACL/J,IAAK,EACLgK,MACI,4BACI,wBAAKE,KAAM,IACP,kBAAC,KAAWK,KAEhB,wBAAKL,KAAM,GAAX,UAQVJ,GACF,wBAAYyB,OAAO,OAAOC,aAAcC,KAAO,IAAIC,KAAQ,UA2FhDC,GAxFG,WAAO,IAAD,EACYxJ,mBAA8C,IAD1D,mBACbyJ,EADa,KACHC,EADG,KAGpBlJ,qBAAU,WC3LH,IAAImJ,SAAQ,SAACC,GAuBhBA,EAtBkB,CACd,CACIL,KAAM,UACNM,OAAQ,MAEZ,CACIN,KAAM,UACNM,OAAQ,MAEZ,CACIN,KAAM,UACNM,OAAQ,MAEZ,CACIN,KAAM,UACNM,OAAQ,MAEZ,CACIN,KAAM,UACNM,OAAQ,WDwKDC,MAAK,SAAAC,GAChBL,EAAYK,QAEjB,IAEH,IAAMC,EAAuB,CACzBnB,KAAMY,EACNhB,OAAQ,OACRC,MAAO,CACHL,SAAS,GAEbM,MAAO,CACHN,SAAS,GAEbO,OAAQ,SACRK,OAAQ,IACRF,UAAU,GAGd,OACI,yBAAKxK,UAAU,uBAEX,wBAAK0L,OAAQ,IAELnC,GAAmBtK,KAAI,SAACqB,EAIrBqL,GACC,OACI,wBAAKrM,IAAKqM,EAAOnC,KAAM,GACnB,4BACI,yBAAKxJ,UAAU,4BACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,uCACX,8BAAOM,EAAKkJ,MACZ,uBAAS9J,MAAOY,EAAKkJ,KACZxJ,UAAU,+CACf,kBAAC,EAAD,CAAMiB,KAAMX,EAAKmJ,SAAUzI,KAAK,OAAOD,KAAK,OAIpD,yBAAKf,UAAU,uCACX,wBAAW0J,MAAK,gBAAMpJ,EAAKoJ,UAG/B,yBAAK1J,UAAU,6BACX,kBAAC,KAAWyL,IAGhB,yBAAKzL,UAAU,8BACX,yBAAKA,UAAU,mCACX,8BACKM,EAAKkJ,MAEV,0BAAM/B,MAAO,CAACmE,WAAY,QAA1B,SACMtL,EAAKoJ,kBAevD,wBAAKgC,OAAQ,IACT,wBAAKlC,KAAM,IACP,4BACI,kBAAC,GAAD,CAASL,YAAaA,GAAaC,mBAAoBA,U,yCEpPhEyC,GAfY,WACvB,OACI,wBACIC,OAAO,MACPpM,MAAM,MACNqM,SAAS,kEACTC,MACI,wBAAQ/K,KAAK,UAAUoD,QAAS,kBAAM6C,KAAQR,KAAK,OAAnD,gBCLVuF,GAAa,iBAA0B,CACzC,CACI1N,KAAM,QACNE,UAAUsB,EACVpB,KAAM,CACJe,MAAO,gBAEThB,SAAU,cACVM,SAAU,CACN,CACIL,KAAM,CACFe,MAAO,gBAEXnB,KAAM,cACNE,UAAWyN,IAEf,CACIvN,KAAM,CACFe,MAAO,4BAEXnB,KAAM,IACNE,UAAWoN,MAIvB,CACItN,KAAM,IACNE,UAAW0N,GACXxN,KAAM,CACFe,MAAO,gBAEXhB,SAAU,aACVM,SAAU,CACN,CACIL,KAAM,CACJe,MAAO,sBAETnB,KAAM,aACNE,UAAWwM,IAEf,CACItM,KAAM,CACFe,MAAO,gBAEXnB,KAAM,IACNE,UAAWoN,QAMZ,qBhBhBa,SAACO,GACzB,IAAMC,EAASD,IAAenN,KAAI,SAACqN,GAC/B,OAAOjO,GAAY,kBAAMiO,QAC1BhG,QAAO,SAACiG,EAAQC,GACf,OAAIA,EAAE3J,OACI,GAAN,mBAAW0J,GAAX,YAAiBC,IAEVD,EAAEE,OAAOD,KAErB,IACH,OAAO,kBAAC,IAAD,KAASH,GgBMCK,CAAaT,K,UChD5BU,GAAMC,KAAI,CAAC1F,eAEjByF,GAAIE,MAAM3M,EAAQ,MAAkB4M,SACpCH,GAAIE,MAAM3M,EAAQ,MAAmB4M,SAErCH,GAAII,QAAO,WACP,OACI,uBAAgBC,OAAQA,MACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ9F,QAASA,MACZ+F,WAOrBN,GAAIO,MAAM,SlBgHJ,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/E,a,uEmB1IfiF,EAAW,SAACrD,GACrB,OAAO,IAAIc,SAAQ,SAACwC,EAASC,GACzBD,EAAQ,aAACxG,MAAO,sBAAUkD,IAC1BuD,EAAO,gC,kBCcTC,EAAwB,CAC1BC,UAAW,QACXC,MAAO,CACHC,SAAU,GACVC,SAAU,GACVC,cAAUC,GAEdC,QAAS,CACHnC,MADG,yGAEgB,OADZ5D,EADJ,EACIA,QAAWgG,EADf,EACeA,IAAKC,EADpB,EACoBA,KADpB,SAEsBA,EAAKZ,EAAUrF,GAFrC,OAGD,OADMkG,EAFL,gBAGKF,EAAI,CACNrN,KAAM,cACNqH,QAASkG,IALZ,YAOEC,OAAOlM,KAAKiM,GAAU3L,OAAS,GAPjC,iBASG,OADOuE,EAASoH,EAATpH,MARV,UASSsH,YAAW,QAAStH,GAT7B,QAUG,OAVH,UAUSF,IAAQR,KAAK,CACf5E,SAAU,MAXjB,2CAeH6M,OAfG,wFAgBD,OAhBC,SAgBKzH,IAAQR,KAAK,CACf5E,SAAU,gBAjBb,OAmBD,OAnBC,SAmBK8M,cAnBL,2CAsBTC,SAAU,CACNC,YADM,SACMd,EADN,GACyB,IAAX1F,EAAU,EAAVA,QAChB,OAAO,2BACA0F,GACA1F,MAMJwF,a,uEC/DFiB,EAAU,WACnB,OAAO,IAAI3D,SAAQ,SAACwC,GAWhBA,EAVa,CACT,CACIjP,KAAM,CACFe,MAAO,sBAEXnB,KAAM,aACNM,KAAM,2BCJhBmQ,EAAc,SAAdA,EAAe5O,GACjB,IAAImB,EAAuB,GAO3B,OANAnB,EAAK6O,SAAQ,SAAC3O,GACNA,EAAKtB,UAAYsB,EAAKtB,SAAS6D,OAAS,IACxCtB,EAAWA,EAASkL,OAAOuC,EAAY1O,EAAKtB,YAEhDuC,EAASmF,KAAKpG,MAEXiB,GAoBLuF,EAAqB,CACvBiH,UAAW,SACXC,MAAO,CACHhH,UAAW,GACXzF,SAAU,IAEd8M,QAAS,CAQHU,QARG,uGASY,OADNzG,EARN,EAQMA,QAAWgG,EARjB,EAQiBA,IAAKC,EARtB,EAQsBA,KARtB,SASkBA,EAAKQ,EAASzG,GAThC,UASKlI,EATL,OAUgB,SAAX8O,EAAYC,GAAiG,IAAtEC,EAAqE,uDAAP,GACvGD,EAASF,SAAQ,SAAC3O,GACX8O,EAAW7Q,OACV+B,EAAK4B,WAAakN,EAAWlN,WAAakN,EAAWlN,WAAWuK,OAAO2C,EAAW7Q,MAAQ,CAAC6Q,EAAW7Q,OAEvG+B,EAAKtB,UAAYsB,EAAKtB,SAAS6D,QAC9BqM,EAAS5O,EAAKtB,SAAUsB,MAIpC4O,CAAS9O,KACLA,EAAKyC,OAAS,GArBjB,iBAsBG,OAtBH,UAsBSyL,EAAI,CACNrN,KAAM,aACNqH,QAASlI,IAxBhB,4CA6BTyO,SAAU,CACNQ,WADM,SACKrB,EADL,GACwB,IAAX1F,EAAU,EAAVA,QACf,OAAO,2BACA0F,GADP,IAEIhH,UAAWsB,EACX/G,SAAUyN,EAAY1G,QAMvBxB,a,iCC9Ef,sGAAO,IAAM4H,EAAa,SAACpP,EAAaoK,GACpC4F,aAAaC,QAAQjQ,EAAKoK,IAGjBvF,EAAa,SAAC7E,GACvB,OAAOgQ,aAAaE,QAAQlQ,IAGnBsP,EAAe,WACxBU,aAAaG,U,iCCTjB,8CAEMC,EAAU,CACZC,SAAU,KAGT3R,OAAe4R,aAChBF,EAAQC,SAAY3R,OAAe4R,YAGvC,IAAM1I,EAAU2I,YAAkBH,I","file":"static/js/main.6a09c2d6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport {Route, Redirect, Switch} from 'react-router-dom'\r\nimport _ from 'lodash'\r\n\r\nwindow.hyoukaRouterPath = {}\r\n\r\nfunction setDocumentTitle(title: string) {\r\n    document.title = `Hyouka-${title}`\r\n}\r\n\r\n/**\r\n * 创建路由组件\r\n * @param routeConfig\r\n */\r\nconst createRoute = (routeConfig: Function) => {\r\n    const {path, component: Com, redirect, meta, icon, ...arg} = routeConfig()\r\n    if (path && path !== '/') {\r\n        window.hyoukaRouterPath[path] = {path, meta, ...arg}\r\n    }\r\n\r\n    if (redirect && _.isArray(arg.children)) {\r\n        arg.children = arg.children.map((route: RouteConfig) => {\r\n            return createRoute(() => route)\r\n        })\r\n        arg.children.unshift(\r\n            <Redirect to={redirect} from={path} key={`${path}_redirect`} exact/>\r\n        )\r\n    }\r\n    const route = {\r\n        key: path || _.random(),\r\n        render: ({...prop}) => {\r\n            setDocumentTitle(meta.title)\r\n            return (<Com renderChildren={arg} {...prop}/>)\r\n        }\r\n    }\r\n    return <Route path={path} {...route}/>\r\n}\r\n\r\n/**\r\n * 逐个创建路由组件\r\n * @param routerConfig\r\n */\r\nexport const createRouter = (routerConfig: Function) => {\r\n    const routes = routerConfig().map((routesItem: RouteConfig) => {\r\n        return createRoute(() => routesItem)\r\n    }).reduce((p: any, n: any) => {\r\n        if (n.length) {\r\n            return [...p, ...n];\r\n        } else {\r\n            return p.concat(n);\r\n        }\r\n    }, []);\r\n    return <Switch>{routes}</Switch>\r\n}\r\n","import React from 'react'\r\nimport {Switch} from 'react-router-dom'\r\nimport {Layout} from 'antd'\r\nimport './styles/user.less'\r\n\r\n\r\nconst {Content} = Layout\r\n\r\nconst UserLayout: React.FC<DefaultReactNodeProps> = (prop) => {\r\n    const {renderChildren} = prop\r\n    const {children} = renderChildren\r\n    return(\r\n        <Layout className=\"full-layout user-layout fixed\">\r\n            <Content>\r\n                <Switch>{children}</Switch>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default UserLayout\r\n","const {pathToRegexp} = require('path-to-regexp')\r\n\r\nexport function conversionPath (path: string) {\r\n    if (path && path.indexOf('http') === 0) {\r\n        return path;\r\n    } else {\r\n        return `/${path || ''}`.replace(/\\/+/g, '/').replace(/\\/:\\w+\\??/, '');\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param menu 平级菜单列表\r\n * @param path 菜单路径\r\n */\r\nexport function getMenuMathKeys (menu: Array<MenuProp>, path: string): any {\r\n    return menu.filter(item => {\r\n        return pathToRegexp(item.path).test(path)\r\n    });\r\n}\r\n\r\nexport function getMenuSelectKeys (menu: Array<MenuProp>, location: DefaultReactNodeProps['location']) {\r\n    const path = location.pathname\r\n    const selectKeys = getMenuMathKeys(menu, path)[0]\r\n    return selectKeys ? [selectKeys.path] : []\r\n}\r\n","import React, {useState, useEffect} from 'react'\nimport {Menu, Layout} from 'antd'\nimport './styles/slider.less'\nimport classnames from 'classnames'\nimport {Icon} from '@/components'\nimport {conversionPath, getMenuSelectKeys} from \"@/utils/util\";\nimport {Link} from 'react-router-dom'\n\nconst {Sider} = Layout\n\nconst {SubMenu, Item} = Menu\n\n\n\ninterface SlideBarProp {\n    menu: Array<MenuProp>;\n    themeClass: string;\n    flatMenu: Array<MenuProp>;\n    currentMenu: {\n        parentPath: string[]\n    };\n    collapsed: boolean;\n}\n\nconst RenderingIcon = (icon: string | React.ReactNode | undefined) => {\n    if (typeof icon === 'string' && icon.indexOf('http') === 0) {\n        return (\n            <img src={icon} alt=\"图标\" className='sider-menu-item-img'/>\n        )\n    }\n    if (typeof icon === 'string') {\n        return (\n            <Icon font='antd' antd='true' type={icon}/>\n        )\n    }\n    return icon\n}\n\nconst SlideBar: React.FC<SlideBarProp & DefaultReactNodeProps> = (prop) => {\n\n    const classname = classnames('sidebar-left', 'sidebar-default')\n    const {menu, collapsed, themeClass, location, flatMenu, currentMenu} = prop\n    const [openKeys, setOpenKeys] = useState<string[] | undefined>([])\n    const selectedKeys = getMenuSelectKeys(flatMenu, location)\n\n    const menuProps = collapsed ? {selectedKeys} : {selectedKeys, openKeys}\n\n    const getMenuPath = (route: MenuProp) => {\n        const path = conversionPath(route.path)\n        const icon = RenderingIcon(route.icon)\n        const {meta} = route\n        if (/^https?:\\/\\//.test(path)) {\n            return (\n                <a href={path}>\n                    {icon}\n                    <span>{meta.title}</span>\n                </a>\n            )\n        }\n        return (\n            <Link to={path}\n                  replace={path === location.pathname}\n            >\n                {icon}\n                <span>{meta.title}</span>\n            </Link>\n        )\n    }\n\n    const getNavMenuItem = (menuList: Array<MenuProp>) => {\n        if (!menuList) {\n            return []\n        }\n        /**\n         * 逐一将MenuProp 换成React.Component = Menu.Item\n         * @param menuItem\n         */\n        const getSubMenuOrItem = (menuItem: MenuProp) => {\n            if (menuItem.children && menuItem.children.length > 0) {\n                if (getNavMenuItem(menuItem.children) && getNavMenuItem(menuItem.children).length > 0) {\n                    return (\n                        <SubMenu title={\n                            menuItem.icon ?\n                                (\n                                    <span>\n                                        {RenderingIcon(menuItem.icon)}\n                                        <span>{menuItem.meta.title}</span>\n                                     </span>\n                                ) :\n                                (\n                                    menuItem.meta.title\n                                )\n                        }\n                                 key={menuItem.path}\n                        >\n                            {getNavMenuItem(menuItem.children)}\n                        </SubMenu>\n                    )\n                }\n            } else {\n                return (\n                    <Item key={menuItem.path}>\n                        {getMenuPath(menuItem)}\n                    </Item>\n                )\n            }\n        }\n\n        return menuList\n            .filter((menuItem: MenuProp) => menuItem.meta.title && !menuItem.hidden)\n            .map((menuItem: MenuProp) => {\n                return getSubMenuOrItem(menuItem)\n            })\n            .filter(item => item)\n    }\n\n    const handlerOpenKeys = (openKeys?: string[]) => {\n        setOpenKeys(openKeys)\n    }\n    useEffect(() => {\n        setOpenKeys(currentMenu ? currentMenu.parentPath : [])\n    }, [currentMenu])\n\n    const SliderBar: React.ReactElement = (\n        <Sider width={230}\n               className={classname}\n               trigger={null}\n               collapsed={collapsed}\n        >\n            <div className='slider-left-logo'>\n                <span>\n                    <img src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt=\"\"/>\n                    {\n                        collapsed ? null : <h1>Hyouka Admin</h1>\n                    }\n                </span>\n            </div>\n            <div className='sidebar-left-content'>\n                <Menu mode=\"inline\"\n                      onOpenChange={keys => handlerOpenKeys(keys as string[])}\n                      className={`ant-menu-${themeClass}`}\n                      {...menuProps}\n                >\n                    {getNavMenuItem(menu)}\n                </Menu>\n            </div>\n        </Sider>\n    )\n    return (SliderBar)\n}\n\nexport default SlideBar\n","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport AntdIcon, { BorderOutlined } from '@ant-design/icons'\r\n\r\ninterface IconProps {\r\n    prefixClass?: string;\r\n    type?: any;\r\n    className?: string;\r\n    children?: React.ReactNode;\r\n    font: string;\r\n    antd: string;\r\n    spin?: boolean\r\n}\r\n\r\nconst Icon:React.FC<IconProps> = (props) => {\r\n    const {prefixClass, type, className, children, font, antd, spin, ...argument} = props\r\n    const classname = classnames(\r\n        prefixClass,\r\n        {\r\n            [font]: font,\r\n            [`${font}-${type}`]: font && type,\r\n            spin\r\n        },\r\n        className\r\n    )\r\n    if (/^&#x.+;$/.test(type)) {\r\n        return (\r\n            <i\r\n                className={classname}\r\n                {...props}\r\n                dangerouslySetInnerHTML={{ __html: type }}\r\n            />\r\n        );\r\n    }\r\n    if(antd) {\r\n        const antdClass = classnames(prefixClass, className)\r\n        if (typeof type === 'string') {\r\n            const Icons = require('@ant-design/icons')[type] || BorderOutlined\r\n            return <Icons className={antdClass} spin={spin} {...props} />;\r\n        }\r\n        if(React.isValidElement(type)) {\r\n            return (\r\n                <AntdIcon\r\n                    component={() => type}\r\n                    className={antdClass}\r\n                    spin={spin}\r\n                    {...props}\r\n                />\r\n            );\r\n        }\r\n    }\r\n    return(\r\n        <i className={className} {...argument}>\r\n            {children}\r\n        </i>\r\n    )\r\n}\r\n\r\nexport default Icon\r\n","import React from 'react'\r\nimport {Avatar, Dropdown, Menu} from 'antd'\r\nimport {LogoutOutlined, GithubOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {getStorage} from \"@/utils/storageUtil\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\n\r\n\r\nconst {Item, Divider} = Menu\r\n\r\nconst AvatarDropdown: React.FC<{dispatch: Dispatch}> = (prop) => {\r\n    const {dispatch} = prop\r\n\r\n    const avatarName = getStorage('roles')\r\n\r\n    const menuDropdown = (\r\n        <Menu onClick={({key}) => {\r\n            switch (key) {\r\n                case 'logout':\r\n                    dispatch({\r\n                        type: 'login/Logout'\r\n                    })\r\n                    return false;\r\n                default:\r\n                    return false\r\n            }\r\n        }}>\r\n            <Item key='center'>\r\n                <UserOutlined/>\r\n                个人中心\r\n            </Item>\r\n            <Item key='github'>\r\n                <GithubOutlined/>\r\n                GitHub地址\r\n            </Item>\r\n            <Divider/>\r\n            <Item key='logout'>\r\n                <LogoutOutlined/>\r\n                退出登录\r\n            </Item>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <Dropdown overlay={menuDropdown} className='avatar-dropdown'>\r\n            <span className='avatar-dropdown-action'>\r\n                <Avatar size=\"small\" className='avatar-dropdown-avatar' src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt='头像'/>\r\n                <span>\r\n                    {avatarName as React.ReactNode}\r\n                </span>\r\n            </span>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nexport default AvatarDropdown\r\n","import React, {useState, useEffect} from 'react'\r\nimport classnames from 'classnames'\r\nimport './styles/index.less'\r\nimport {Icon, FullScreenIcon, Breadcrumb} from '@/components'\r\nimport AvatarDropdown from \"@/components/header/AvatarDropdown\";\r\nimport {GlobalFullScreen} from \"@/utils/fullScreen\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\n\r\ninterface GlobalHeaderProp extends DefaultReactNodeProps{\r\n    setCollapsed: React.ReactEventHandler;\r\n    collapsed: boolean;\r\n    dispatch: Dispatch;\r\n}\r\n\r\nconst GlobalHeader: React.FC<GlobalHeaderProp> = (prop) => {\r\n    const {setCollapsed, collapsed, dispatch, location} = prop\r\n    const classname = classnames('ant-header')\r\n    const [fullscreen, setFullscreen] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        document.onfullscreenchange = () => {\r\n            setFullscreen(!!document.fullscreenElement);\r\n        };\r\n    }, []);\r\n    return(\r\n        <div className={classname}>\r\n\r\n            <span className='ant-header-trigger' onClick={setCollapsed}>\r\n                <Icon type={collapsed ? 'MenuUnfoldOutlined' : 'MenuFoldOutlined'} antd='true' font=''/>\r\n            </span>\r\n\r\n            <Breadcrumb location={location}/>\r\n\r\n            <div className='ant-header-right'>\r\n                <span className='avatar-dropdown avatar-dropdown-action'\r\n                      onClick={() => {\r\n                          GlobalFullScreen(document.documentElement)\r\n                          setFullscreen(!document.fullscreenElement)\r\n                      }}\r\n                >\r\n                   <FullScreenIcon fullscreen={fullscreen} />\r\n                </span>\r\n                <AvatarDropdown dispatch={dispatch}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default GlobalHeader\r\n","export function GlobalFullScreen(element: HTMLElement | any) {\r\n    if (!document.fullscreenElement) {\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        } else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n        } else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n        } else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullScreen();\r\n        }\r\n    } else if (document.fullscreenElement) {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if ((document as any).msExitFullscreen) {\r\n            (document as any).msExitFullscreen();\r\n        } else if ((document as any).mozCancelFullScreen) {\r\n            (document as any).mozCancelFullScreen();\r\n        } else if ((document as any).webkitExitFullscreen) {\r\n            (document as any).webkitExitFullscreen();\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { FullscreenExitOutlined, FullscreenOutlined } from '@ant-design/icons';\r\nimport { Tooltip } from 'antd';\r\n\r\ninterface FullScreenIconProp {\r\n    fullscreen: boolean;\r\n}\r\n\r\nconst FullScreenIcon: React.FC<FullScreenIconProp> = (prop) => {\r\n    const {fullscreen} = prop\r\n\r\n    return fullscreen\r\n        ?\r\n        (<Tooltip title='退出全屏'>\r\n            <FullscreenExitOutlined />\r\n        </Tooltip>)\r\n        :\r\n        (<Tooltip title='全屏'>\r\n            <FullscreenOutlined />\r\n        </Tooltip>)\r\n}\r\n\r\nexport default FullScreenIcon\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Breadcrumb} from 'antd'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst {Item} = Breadcrumb\r\n\r\nfunction getRouterPath(pathName: string) {\r\n    const orderPath: Array<string> = []\r\n    pathName.split('/').reduce((prev: string, next: string) => {\r\n        const path = [prev, next].join('/');\r\n        orderPath.push(path);\r\n        return path;\r\n    })\r\n    return orderPath\r\n        .map(item => window.hyoukaRouterPath[item])\r\n        .filter(item => item)\r\n}\r\n\r\nconst BreadcrumbAvatar: React.FC<DefaultReactNodeProps> = (prop) => {\r\n    const {location} = prop\r\n    const [currentRoute, setCurrentRoute] = useState<Array<any>>([])\r\n    useEffect(() => {\r\n        setCurrentRoute(getRouterPath(location.pathname))\r\n    },[location])\r\n    return (\r\n       <div>\r\n           {\r\n               currentRoute.length\r\n                   ?\r\n                   (\r\n                       <Breadcrumb>\r\n                           <Item>\r\n                               <Link to='/'>\r\n                                   首页\r\n                               </Link>\r\n                           </Item>\r\n                           {\r\n                               currentRoute.map((item) => (\r\n                                   <Item key={item.path}>\r\n                                       <span>\r\n                                           {item.meta.title}\r\n                                       </span>\r\n                                   </Item>\r\n                               ))\r\n                           }\r\n                       </Breadcrumb>\r\n                   )\r\n                   :\r\n                   null\r\n           }\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default BreadcrumbAvatar\r\n","import React, {useState, useEffect} from 'react'\r\nimport {getStorage} from \"@/utils/storageUtil\";\r\nimport {useHistory, Switch} from 'react-router-dom'\r\nimport classnames from 'classnames'\r\nimport {Layout} from 'antd'\r\nimport {SwitchTransition, CSSTransition} from 'react-transition-group';\r\nimport {SlideBar, GlobalHeader} from '@/components'\r\nimport {connect} from 'dva'\r\nimport {Dispatch} from \"@/utils/Effect\";\r\nimport {ConnectState} from \"@/models/connect\";\r\nimport './styles/basic.less'\r\nimport {getMenuMathKeys} from \"@/utils/util\";\r\n\r\nconst {Content, Header} = Layout;\r\n\r\n\r\ninterface BasicLayoutProp {\r\n    collapsedLeftSide: boolean;\r\n    leftCollapsedWidth: number;\r\n    expandTopBar: boolean;\r\n    showSidebarHeader: boolean;\r\n    collapsedRightSide: boolean;\r\n    currentMenu: object;\r\n    isMobile: boolean;\r\n    layout?: object;\r\n    menu: Array<MenuProp>;\r\n    dispatch: Dispatch\r\n}\r\n\r\nconst BasicLayout: React.FC<DefaultReactNodeProps & BasicLayoutProp> = (prop) => {\r\n    const {location, renderChildren, dispatch, menu, flatMenu} = prop\r\n    const {children} = renderChildren\r\n    const [collapsedLeftSide, setCollapsed] = useState<boolean>(false)\r\n    const history = useHistory()\r\n    const [roles] = useState<string | unknown>(getStorage('roles'))\r\n    const [theme] = useState<{ leftSide: string; navBar: string; layout?: Array<string> }>({\r\n        leftSide: 'darkgrey', // 左边\r\n        navBar: 'light', // 顶部\r\n        ...getStorage('theme') as Array<string>\r\n    })\r\n    const classname = classnames('basic-layout', 'full-layout', {\r\n        'fixed': theme.layout && theme.layout.indexOf('fixedSidebar') !== -1,\r\n        'fixed-header': theme.layout && theme.layout.indexOf('fixedHeader') !== -1,\r\n        'fixed-breadcrumbs': theme.layout && theme.layout.indexOf('fixedBreadcrumbs') !== -1,\r\n        'hided-breadcrumbs': theme.layout && theme.layout.indexOf('hidedBreadcrumbs') !== -1,\r\n    })\r\n    const getCurrentMenu = () => {\r\n        return getMenuMathKeys(flatMenu, location.pathname)[0]\r\n    }\r\n\r\n    useEffect(() => {\r\n        (() => {\r\n            if (!roles) {\r\n                history.push({\r\n                    pathname: '/user/login'\r\n                })\r\n            }\r\n        })()\r\n\r\n        if (!theme.layout) {\r\n            theme.layout = [\r\n                'fixedHeader',\r\n                'fixedSidebar',\r\n                'fixedBreadcrumbs'\r\n            ];\r\n        }\r\n\r\n        dispatch({\r\n            type: 'global/getMenu',\r\n        })\r\n    }, [roles, history, theme, dispatch])\r\n\r\n    return (\r\n        <Layout className={classname}>\r\n\r\n            <Layout>\r\n\r\n                <SlideBar collapsed={collapsedLeftSide} currentMenu={getCurrentMenu()} flatMenu={flatMenu} menu={menu} location={location} themeClass={theme.leftSide} collapsedLeftSide={collapsedLeftSide}/>\r\n\r\n                <Content style={{overflow: 'hidden'}}>\r\n\r\n                    <Layout className=\"full-layout\">\r\n\r\n                        <Header>\r\n                            <GlobalHeader location={location} dispatch={dispatch} collapsed={collapsedLeftSide} setCollapsed={() => {setCollapsed(!collapsedLeftSide)}}/>\r\n                        </Header>\r\n\r\n                        <SwitchTransition>\r\n                            <CSSTransition\r\n                                key={location.pathname}\r\n                                classNames=\"fade\"\r\n                                timeout={500}\r\n                            >\r\n                                <Content className=\"router-page\">\r\n                                    <Switch location={location}>{children}</Switch>\r\n                                </Content>\r\n                            </CSSTransition>\r\n                        </SwitchTransition>\r\n                    </Layout>\r\n\r\n                </Content>\r\n\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\nexport default connect(({global, login}: ConnectState) => ({\r\n    menu: global.asyncMenu,\r\n    login,\r\n    ...global\r\n}))(BasicLayout)\r\n","import React, {useState} from 'react'\r\nimport {Layout} from 'antd'\r\nimport {Spin, Form, Input, Button, Checkbox} from 'antd'\r\nimport './index.less'\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {connect} from 'dva'\r\nimport {ConnectState} from \"@/models/connect\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\nimport {LoginState} from \"@/models/login\";\r\n\r\ninterface LoginProps {\r\n    dispatch: Dispatch;\r\n    formLogin: LoginState\r\n}\r\n\r\nconst {Content} = Layout\r\nconst {Item} = Form\r\n\r\nconst Login: React.FC<LoginProps & DefaultReactNodeProps> = (props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const handlerSubmit = (values: { username: \"admin\" | \"user\" | \"Hyouka\"; password: string }) => {\r\n        const {dispatch} = props\r\n        dispatch({\r\n            type: 'login/Login',\r\n            payload: {...values}\r\n        })\r\n        setLoading(false)\r\n    }\r\n    return (\r\n        <Layout className=\"full-layout login-page\">\r\n            <Content>\r\n                <Spin tip='登陆中...' spinning={loading}>\r\n                    <Form className=\"login-form\" onFinish={handlerSubmit}>\r\n                        <div className='user-img'>\r\n                            <img src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt=\"logo\"/>\r\n                            <b>HYOUKA</b>\r\n                            <span>-</span>\r\n                            <span>Admin</span>\r\n                        </div>\r\n                        <Item name='username' rules={[{required: true, message: '请输入您的用户名，示例admin'}]}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<UserOutlined/>}\r\n                                placeholder=\"用户名\"\r\n                            />\r\n                        </Item>\r\n                        <Item name='password' rules={[{required: true, message: '请输入您的密码，示例admin'}]}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<LockOutlined/>}\r\n                                type=\"password\"\r\n                                placeholder=\"密码\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                            <Checkbox>记住我</Checkbox>\r\n                        </Item>\r\n                        <a className=\"login-form-forgot\" href=\"/\">\r\n                            忘记密码\r\n                        </a>\r\n                        <Item>\r\n                            <Button size=\"large\" className=\"login-form-button\" type={'primary'} htmlType={'submit'}>\r\n                                登陆\r\n                            </Button>\r\n                        </Item>\r\n                        <div className=\"new-user\">\r\n                            新用户？<a href='/'>现在注册</a>\r\n                        </div>\r\n                    </Form>\r\n                </Spin>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\nexport default connect(\r\n    ({login}: ConnectState) => ({\r\n        formLogin: login,\r\n    })\r\n)(Login);\r\n","import React from 'react'\r\nimport {Tabs} from 'antd'\r\n\r\nconst { TabPane } = Tabs;\r\ninterface CarTabsProp {\r\n    tabBarExtraContent?: React.ReactNode | {\r\n        left?: React.ReactNode,\r\n        right?: React.ReactNode\r\n    },\r\n    tabPaneList?: Array<{\r\n        tab: string | React.ReactNode;\r\n        key: string | number;\r\n        child: string | React.ReactNode;\r\n    }>\r\n}\r\n\r\nconst CarTabs: React.FC<CarTabsProp> = (props) => {\r\n    const {tabPaneList, tabBarExtraContent} = props\r\n\r\n    return (\r\n        <Tabs tabBarExtraContent={tabBarExtraContent}>\r\n            {\r\n                tabPaneList\r\n                    ? tabPaneList.map(item => {\r\n                        return(\r\n                            <TabPane key={item.key} tab={item.tab}>\r\n                                {item.child}\r\n                            </TabPane>\r\n                        )\r\n                    })\r\n                    : ''\r\n            }\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default CarTabs\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Row, Col, Card, Tooltip, Statistic, DatePicker} from 'antd'\r\nimport \"./styles/dashboard.less\"\r\nimport {Icon} from \"@/components\";\r\nimport {Column} from '@ant-design/charts'\r\nimport {getAreaChart} from \"@/api/chartsApi\";\r\nimport moment from 'moment'\r\nimport {CarTabs} from './components/index'\r\n\r\nconst dashboardArrayList = [\r\n    {\r\n        span: '总销售额',\r\n        iconType: 'InfoCircleOutlined',\r\n        value: Math.floor(Math.random() * 10000000)\r\n    },\r\n    {\r\n        span: '总销售额',\r\n        iconType: 'InfoCircleOutlined',\r\n        value: Math.floor(Math.random() * 10000000)\r\n    },\r\n    {\r\n        span: '总销售额',\r\n        iconType: 'InfoCircleOutlined',\r\n        value: Math.floor(Math.random() * 10000000)\r\n    },\r\n    {\r\n        span: '总销售额',\r\n        iconType: 'InfoCircleOutlined',\r\n        value: Math.floor(Math.random() * 10000000)\r\n    }\r\n]\r\n\r\nconst listState = [\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    },\r\n    {\r\n        title: '浙江绍兴店',\r\n        money: '3232,323'\r\n    }\r\n]\r\n\r\nconst ColumnData = [\r\n    {\r\n        type: '家具家电',\r\n        sales: 38,\r\n    },\r\n    {\r\n        type: '粮油副食',\r\n        sales: 52,\r\n    },\r\n    {\r\n        type: '生鲜水果',\r\n        sales: 61,\r\n    },\r\n    {\r\n        type: '美容洗护',\r\n        sales: 145,\r\n    },\r\n    {\r\n        type: '母婴用品',\r\n        sales: 48,\r\n    },\r\n    {\r\n        type: '进口食品',\r\n        sales: 38,\r\n    },\r\n    {\r\n        type: '食品饮料',\r\n        sales: 38,\r\n    },\r\n    {\r\n        type: '家庭清洁',\r\n        sales: 38,\r\n    },\r\n]\r\n\r\nconst columnConfig: ChartsConfig = {\r\n    title: {\r\n        visible: true,\r\n        text: '销售趋势',\r\n        style: {\r\n            fontSize: 14\r\n        }\r\n    },\r\n    padding: 'auto',\r\n    xField: 'type',\r\n    xAxis: {\r\n        title: {\r\n            visible: false\r\n        }\r\n    },\r\n    yAxis: {\r\n        title: {\r\n            visible: false\r\n        }\r\n    },\r\n    yField: 'sales',\r\n    data: ColumnData,\r\n    forceFit: true,\r\n}\r\n\r\nconst style = {\r\n    display: 'flex',\r\n    'flex-direction': 'column',\r\n    height: '100%'\r\n}\r\n\r\nconst tabPaneList = [\r\n    {\r\n        tab: '销售额',\r\n        key: 1,\r\n        child: (\r\n            <Row>\r\n                <Col span={16}>\r\n                    <Column {...columnConfig}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <div style={style}>\r\n                        <ul style={{...style, \"listStyle\": 'decimal'}}>\r\n                            {\r\n                                listState.map(item => {\r\n                                    return (\r\n                                        <li style={{flex: 1}}>\r\n                                            <span>\r\n                                                {item.title}\r\n                                            </span>\r\n                                                <span>\r\n                                                {item.money}\r\n                                            </span>\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    },\r\n    {\r\n        tab: '访问量',\r\n        key: 2,\r\n        child: (\r\n            <Row>\r\n                <Col span={16}>\r\n                    <Column {...columnConfig}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    321\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n]\r\n\r\nconst tabBarExtraContent = (\r\n    <DatePicker picker=\"year\" defaultValue={moment(new Date(), \"YYYY\")}/>\r\n)\r\n\r\nconst Dashboard = () => {\r\n    const [lineData, setLineData] = useState<Array<ObjectAsync<number | string>>>([])\r\n\r\n    useEffect(() => {\r\n        getAreaChart().then(res => {\r\n            setLineData(res)\r\n        })\r\n    }, [])\r\n\r\n    const config: ChartsConfig = {\r\n        data: lineData,\r\n        xField: 'Date',\r\n        xAxis: {\r\n            visible: false,\r\n        },\r\n        yAxis: {\r\n            visible: false\r\n        },\r\n        yField: 'scales',\r\n        height: 100,\r\n        forceFit: true\r\n    };\r\n\r\n    return (\r\n        <div className='dashboard-component'>\r\n\r\n            <Row gutter={16}>\r\n                {\r\n                    dashboardArrayList.map((item: {\r\n                        span: string;\r\n                        iconType: string;\r\n                        value: number | string;\r\n                    }, index: number) => {\r\n                        return (\r\n                            <Col key={index} span={6}>\r\n                                <Card>\r\n                                    <div className='dashboard-component-body'>\r\n                                        <div className='dashboard-component-meta'>\r\n                                            <div className='dashboard-component-chart-top'>\r\n                                                <div className='dashboard-component-chart-top-index'>\r\n                                                    <span>{item.span}</span>\r\n                                                    <Tooltip title={item.span}\r\n                                                             className='dashboard-component-chart-top-index-tooltip'>\r\n                                                        <Icon type={item.iconType} antd='true' font=''/>\r\n                                                    </Tooltip>\r\n                                                </div>\r\n\r\n                                                <div className='dashboard-component-chart-statistic'>\r\n                                                    <Statistic value={`￥${item.value}`}/>\r\n                                                </div>\r\n\r\n                                                <div className='dashboard-component-chart'>\r\n                                                    <Column {...config} />\r\n                                                </div>\r\n\r\n                                                <div className='dashboard-component-footer'>\r\n                                                    <div className='dashboard-component-footer-span'>\r\n                                                        <span>\r\n                                                            {item.span}\r\n                                                        </span>\r\n                                                        <span style={{marginLeft: '8px'}}>\r\n                                                            ￥{item.value}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })\r\n                }\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n                <Col span={24}>\r\n                    <Card>\r\n                        <CarTabs tabPaneList={tabPaneList} tabBarExtraContent={tabBarExtraContent}/>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","export function getAreaChart(): Promise<Array<{ Date: string | number; scales: number | string }>> {\r\n    return new Promise((resolver) => {\r\n        const arrayList = [\r\n            {\r\n                Date: '2010-01',\r\n                scales: 1998\r\n            },\r\n            {\r\n                Date: '2010-02',\r\n                scales: 1850\r\n            },\r\n            {\r\n                Date: '2010-03',\r\n                scales: 1851\r\n            },\r\n            {\r\n                Date: '2010-04',\r\n                scales: 1234\r\n            },\r\n            {\r\n                Date: '2010-05',\r\n                scales: 1560\r\n            }\r\n        ]\r\n        resolver(arrayList)\r\n    })\r\n}\r\n","import React from 'react'\r\nimport {history} from \"@/utils/history\";\r\nimport { Button, Result } from 'antd';\r\n\r\n\r\nconst NotFound: React.FC = () => {\r\n    return(\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"对不起没有相关的页面...\"\r\n            extra={\r\n                <Button type=\"primary\" onClick={() => history.push('/')}>\r\n                    Back Home\r\n                </Button>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import {createRouter} from \"@/utils/core.tsx\";\r\nimport {BasicLayout, UserLayout} from '@/layout'\r\nimport {Dashboard, Login, NotFound} from \"@/views\";\r\n\r\n/**\r\n * 这里就是路由表 就不说了 这不过这里是函数return的没太大意义最关键的是下面的createRouter\r\n */\r\nconst asyncRoute = (): Array<RouteConfig> => [\r\n    {\r\n        path: '/user',\r\n        component:UserLayout,\r\n        meta: {\r\n          title: '登陆'\r\n        },\r\n        redirect: '/user/login',\r\n        children: [\r\n            {\r\n                meta: {\r\n                    title: '登陆'\r\n                },\r\n                path: '/user/login',\r\n                component: Login\r\n            },\r\n            {\r\n                meta: {\r\n                    title: '错误页面'\r\n                },\r\n                path: '*',\r\n                component: NotFound\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/',\r\n        component: BasicLayout,\r\n        meta: {\r\n            title: '首页'\r\n        },\r\n        redirect: '/dashboard',\r\n        children: [\r\n            {\r\n                meta: {\r\n                  title: '默认页'\r\n                },\r\n                path: '/dashboard',\r\n                component: Dashboard,\r\n            },\r\n            {\r\n                meta: {\r\n                    title: '错误'\r\n                },\r\n                path: '*',\r\n                component: NotFound,\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\nexport default () => createRouter(asyncRoute)\r\n\r\n","import React from 'react';\nimport {HashRouter, Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport '@/assets/styles/index.less'\nimport createRoutes from \"@/router/routes\";\nimport dva from 'dva'\nimport {history} from \"@/utils/history\";\nimport {ConfigProvider} from 'antd'\nimport locale from 'antd/es/locale/zh_CN'\n\nconst app = dva({history})\n\napp.model(require('@/models/login').default)\napp.model(require('@/models/global').default)\n\napp.router(() => {\n    return (\n        <ConfigProvider locale={locale}>\n            <HashRouter>\n                <Router history={history}>\n                    {createRoutes()}\n                </Router>\n            </HashRouter>\n        </ConfigProvider>\n    )\n})\n\napp.start('#root');\n\nserviceWorker.unregister();\n","interface LoginProp {\r\n    username: 'admin' | 'user' | 'Hyouka';\r\n    password: any,\r\n}\r\n\r\ntype LoginState = {roles: string}\r\n\r\nexport const LoginApi = (data: LoginProp): Promise<LoginState> => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve({roles: '管理员', ...data})\r\n        reject('登陆失败')\r\n    })\r\n}\r\n","import {Effect} from \"@/utils/Effect\";\r\nimport {Reducer} from 'redux'\r\nimport {LoginApi} from \"@/api/login\";\r\nimport {clearStotage, setStorage} from \"@/utils/storageUtil\";\r\nimport {history} from \"@/utils/history\";\r\n\r\nexport interface LoginState {\r\n    username: string | number;\r\n    password: string;\r\n    remember?: undefined | boolean;\r\n}\r\n\r\ninterface LoginType {\r\n    namespace: 'login';\r\n    state: LoginState;\r\n    effects: {\r\n        Login: Effect;\r\n        Logout: Effect;\r\n    },\r\n    reducers: {\r\n        changeState: Reducer<LoginState>\r\n    }\r\n}\r\n\r\nconst loginModel: LoginType = {\r\n    namespace: \"login\",\r\n    state: {\r\n        username: '',\r\n        password: '',\r\n        remember: undefined\r\n    },\r\n    effects: {\r\n        * Login({payload}, {put, call}) {\r\n            const response = yield call(LoginApi, payload)\r\n            yield put({\r\n                type: 'changeState',\r\n                payload: response\r\n            })\r\n            if(Object.keys(response).length > 0) {\r\n                const {roles} = response\r\n                yield setStorage('roles', roles)\r\n                yield history.push({\r\n                    pathname: '/'\r\n                })\r\n            }\r\n        },\r\n        * Logout() {\r\n            yield history.push({\r\n                pathname: '/user/login'\r\n            })\r\n            yield clearStotage()\r\n        }\r\n    },\r\n    reducers: {\r\n        changeState(state, {payload}) {\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default loginModel\r\n","export const getMenu = (): Promise<Array<MenuProp>> => {\r\n    return new Promise((resolve) => {\r\n        const menu = [\r\n            {\r\n                meta: {\r\n                    title: '默认页',\r\n                },\r\n                path: '/dashboard',\r\n                icon: 'DashboardOutlined',\r\n            },\r\n\r\n        ]\r\n        resolve(menu)\r\n    })\r\n}\r\n","import {Effect} from \"@/utils/Effect\";\r\nimport {Reducer} from 'redux'\r\nimport {getMenu} from \"@/api/basicApi\";\r\n\r\nconst getFlatMenu = (menu: Array<MenuProp>): Array<MenuProp> => {\r\n    let flatMenu: Array<any> = [];\r\n    menu.forEach((item: MenuProp) => {\r\n        if (item.children && item.children.length > 0) {\r\n            flatMenu = flatMenu.concat(getFlatMenu(item.children))\r\n        }\r\n        flatMenu.push(item)\r\n    })\r\n    return flatMenu\r\n}\r\n\r\nexport interface GlobalState {\r\n    asyncMenu: Array<RouteConfig> | [];\r\n    flatMenu: typeof getFlatMenu | Array<MenuProp>;\r\n}\r\n\r\ninterface GlobalType {\r\n    namespace: 'global';\r\n    state: GlobalState;\r\n    effects: {\r\n        getMenu: Effect\r\n    },\r\n    reducers: {\r\n        changeMenu: Reducer<GlobalState>\r\n    }\r\n}\r\n\r\n\r\nconst global: GlobalType = {\r\n    namespace: \"global\",\r\n    state: {\r\n        asyncMenu: [],\r\n        flatMenu: []\r\n    },\r\n    effects: {\r\n        /**\r\n         *\r\n         * @param payload state?: any\r\n         * @param put action: Reducer\r\n         * @param call 调用函数\r\n         * 在这里处理你的权限管理\r\n         */\r\n        * getMenu({payload}, {put, call}) {\r\n            const menu = yield call(getMenu, payload)\r\n            const loopPath = (loopMenu: Array<MenuProp>, parentItem: {parentPath?: string | string[]; path?: string} = {}) => {\r\n                loopMenu.forEach((item: MenuProp) => {\r\n                    if(parentItem.path) {\r\n                        item.parentPath = parentItem.parentPath ? parentItem.parentPath.concat(parentItem.path) : [parentItem.path]\r\n                    }\r\n                    if(item.children && item.children.length) {\r\n                        loopPath(item.children, item)\r\n                    }\r\n                })\r\n            }\r\n            loopPath(menu)\r\n            if (menu.length > 0) {\r\n                yield put({\r\n                    type: 'changeMenu',\r\n                    payload: menu\r\n                })\r\n            }\r\n        }\r\n    },\r\n    reducers: {\r\n        changeMenu(state, {payload}) {\r\n            return {\r\n                ...state,\r\n                asyncMenu: payload,\r\n                flatMenu: getFlatMenu(payload)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default global\r\n","export const setStorage = (key: string, value: string ) => {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nexport const getStorage = (key: string): string | undefined | unknown | Array<string> => {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nexport const clearStotage = (): void => {\r\n    localStorage.clear()\r\n}\r\n","import {createHashHistory} from 'history'\r\n\r\nconst options = {\r\n    basename: '/'\r\n}\r\n\r\nif ((window as any).routerBase) {\r\n    options.basename = (window as any).routerBase;\r\n}\r\n\r\nconst history = createHashHistory(options)\r\n\r\nexport {\r\n    history\r\n}\r\n"],"sourceRoot":""}