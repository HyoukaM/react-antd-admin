{"version":3,"sources":["utils/storageUtil.ts","serviceWorker.ts","utils/core.tsx","layout/UserLayout.tsx","components/slideBar/SlideBar.tsx","components/icon/Icon.tsx","components/header/AvatarDropdown.tsx","components/header/Header.tsx","utils/fullScreen.ts","components/fullScreenIcon/FullScreenIcon.tsx","components/breadcrumb/Breadcrumb.tsx","layout/BasicLayout.tsx","views/login/Login.tsx","views/dashboard/Dashboard.tsx","views/404/NotFound.tsx","router/routes.ts","index.tsx","api/login.ts","models/login.ts","api/basicApi.ts","models/global.ts","utils/history.ts"],"names":["setStorage","key","value","localStorage","setItem","getStorage","getItem","clearStotage","clear","Boolean","window","location","hostname","match","hyoukaRouterPath","createRoute","routeConfig","path","Com","component","redirect","meta","arg","icon","_","isArray","children","map","route","unshift","to","from","exact","random","render","title","prop","document","renderChildren","Content","UserLayout","className","Sider","SubMenu","Item","RenderingIcon","indexOf","src","alt","font","antd","type","SlideBar","classname","classnames","menu","collapsedLeftSide","themeClass","width","trigger","collapsed","mode","getNavMenuItem","menuList","filter","menuItem","hidden","length","getSubMenuOrItem","item","Icon","props","prefixClass","spin","argument","test","dangerouslySetInnerHTML","__html","antdClass","Icons","require","BorderOutlined","React","isValidElement","Divider","AvatarDropdown","dispatch","avatarName","menuDropdown","onClick","UserOutlined","GithubOutlined","LogoutOutlined","overlay","size","GlobalHeader","setCollapsed","useState","fullscreen","setFullscreen","useEffect","onfullscreenchange","fullscreenElement","Breadcrumb","element","documentElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullscreen","webkitRequestFullScreen","FullScreenIcon","FullscreenExitOutlined","FullscreenOutlined","BreadcrumbAvatar","currentRoute","setCurrentRoute","pathName","orderPath","split","reduce","prev","next","join","push","getRouterPath","pathname","Header","connect","global","login","asyncMenu","history","useHistory","roles","leftSide","navBar","theme","layout","style","overflow","SwitchTransition","CSSTransition","classNames","timeout","formLogin","loading","setLoading","tip","spinning","onFinish","values","payload","name","rules","required","message","prefix","placeholder","LockOutlined","valuePropName","noStyle","href","htmlType","Dashboard","NotFound","status","subTitle","extra","asyncRoute","Login","BasicLayout","routerConfig","routes","routesItem","p","n","concat","createRouter","app","dva","model","default","router","createRoutes","start","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","LoginApi","data","Promise","resolve","reject","loginModel","namespace","state","username","password","remember","undefined","effects","put","call","response","Object","keys","replace","Logout","reducers","changeState","getMenu","changeMenu","options","basename","routerBase","createBrowserHistory"],"mappings":"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","file":"static/js/main.b0085f38.chunk.js","sourcesContent":["export const setStorage = (key: string, value: string ) => {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nexport const getStorage = (key: string): string | undefined | unknown | Array<string> => {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nexport const clearStotage = (): void => {\r\n    localStorage.clear()\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport {Route, Redirect, Switch} from 'react-router-dom'\r\nimport _ from 'lodash'\r\n\r\nwindow.hyoukaRouterPath = {}\r\n\r\nfunction setDocumentTitle(title: string) {\r\n    document.title = `Hyouka-${title}`\r\n}\r\n/**\r\n * 创建路由组件\r\n * @param routeConfig\r\n */\r\nconst createRoute = (routeConfig: Function) => {\r\n    const {path, component: Com, redirect, meta, icon, ...arg} = routeConfig()\r\n    if(path && path !== '/') {\r\n        window.hyoukaRouterPath[path] = {path, meta, ...arg}\r\n    }\r\n\r\n    if (redirect && _.isArray(arg.children)) {\r\n        arg.children = arg.children.map((route: RouteConfig) => {\r\n            return createRoute(() => route)\r\n        })\r\n        arg.children.unshift(<Redirect to={redirect} from={path} key={`${path}_redirect`} exact/>)\r\n    }\r\n    const route = {\r\n        key: path || _.random(),\r\n        render: ({...prop}) => {\r\n            setDocumentTitle(meta.title)\r\n            return (<Com renderChildren={arg} {...prop}/>)}\r\n    }\r\n    return <Route path={path} {...route}/>\r\n}\r\n\r\n/**\r\n * 逐个创建路由组件\r\n * @param routerConfig\r\n */\r\nexport const createRouter = (routerConfig: Function) => {\r\n    const routes = routerConfig().map((routesItem: RouteConfig) => {\r\n        return createRoute(() => routesItem)\r\n    }).reduce((p: any, n: any) => {\r\n        if (n.length) {\r\n            return [...p, ...n];\r\n        } else {\r\n            return p.concat(n);\r\n        }\r\n    }, []);\r\n    return<Switch>{routes}</Switch>\r\n}\r\n","import React from 'react'\r\nimport {Switch} from 'react-router-dom'\r\nimport {Layout} from 'antd'\r\nimport './styles/user.less'\r\n\r\n\r\nconst {Content} = Layout\r\n\r\nconst UserLayout: React.FC<DefaultReactNodeProps> = (prop) => {\r\n    const {renderChildren} = prop\r\n    const {children} = renderChildren\r\n    return(\r\n        <Layout className=\"full-layout user-layout fixed\">\r\n            <Content>\r\n                <Switch>{children}</Switch>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default UserLayout\r\n","import React from 'react'\r\nimport {Menu, Layout} from 'antd'\r\nimport './styles/slider.less'\r\nimport classnames from 'classnames'\r\nimport {Icon} from '@/components'\r\n\r\nconst {Sider} = Layout\r\n\r\nconst {SubMenu, Item} = Menu\r\n\r\ninterface SlideBarProp {\r\n    menu: Array<MenuProp>;\r\n    collapsedLeftSide: boolean;\r\n    themeClass: string;\r\n}\r\n\r\nconst RenderingIcon = (icon: string | React.ReactNode | undefined) => {\r\n    if (typeof icon === 'string' && icon.indexOf('http') === 0) {\r\n        return (\r\n            <img src={icon} alt=\"图标\" className='sider-menu-item-img'/>\r\n        )\r\n    }\r\n    if (typeof icon === 'string') {\r\n        return (\r\n            <Icon font='antd' antd='true' type={icon}/>\r\n        )\r\n    }\r\n    return icon\r\n}\r\n\r\nconst SlideBar: React.FC<SlideBarProp> = (prop) => {\r\n    const classname = classnames('sidebar-left', 'sidebar-default')\r\n    const {menu, collapsedLeftSide, themeClass} = prop\r\n\r\n    const getNavMenuItem = (menuList: Array<MenuProp>) => {\r\n        if (!menuList) {\r\n            return []\r\n        }\r\n        /**\r\n         * 逐一将MenuProp 换成React.Component = Menu.Item\r\n         * @param menuItem\r\n         */\r\n        const getSubMenuOrItem = (menuItem: MenuProp) => {\r\n            if (menuItem.children && menuItem.children.length > 0) {\r\n                if (getNavMenuItem(menuItem.children) && getNavMenuItem(menuItem.children).length > 0) {\r\n                    return (\r\n                        <SubMenu title={\r\n                            menuItem.icon ?\r\n                                (\r\n                                    <span>\r\n                                        {RenderingIcon(menuItem.icon)}\r\n                                        <span>{menuItem.meta.title}</span>\r\n                                     </span>\r\n                                ) :\r\n                                (\r\n                                    menuItem.meta.title\r\n                                )\r\n                        }\r\n                                 key={menuItem.path}\r\n                        >\r\n                            {getNavMenuItem(menuItem.children)}\r\n                        </SubMenu>\r\n                    )\r\n                }\r\n            } else {\r\n                return (\r\n                    <Item key={menuItem.path}>\r\n                        {menuItem.icon ? RenderingIcon(menuItem.icon) : ''}\r\n                        <span>{menuItem.meta.title}</span>\r\n                    </Item>\r\n                )\r\n            }\r\n        }\r\n\r\n        return menuList\r\n            .filter((menuItem: MenuProp) => menuItem.meta.title && !menuItem.hidden)\r\n            .map((menuItem: MenuProp) => {\r\n                return getSubMenuOrItem(menuItem)\r\n            })\r\n            .filter(item => item)\r\n    }\r\n\r\n\r\n    const SliderBar: React.ReactElement = (\r\n        <Sider width={230}\r\n               className={classname}\r\n               trigger={null}\r\n               collapsed={collapsedLeftSide}\r\n        >\r\n            <div className='slider-left-logo'>\r\n                <span>\r\n                    <img src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt=\"\"/>\r\n                    {\r\n                        collapsedLeftSide ? null : <h1>Hyouka Admin</h1>\r\n                    }\r\n                </span>\r\n            </div>\r\n            <div className='sidebar-left-content'>\r\n                <Menu mode=\"inline\"\r\n                      className={`ant-menu-${themeClass}`}\r\n                >\r\n                    {getNavMenuItem(menu)}\r\n                </Menu>\r\n            </div>\r\n        </Sider>\r\n    )\r\n    return (SliderBar)\r\n}\r\nexport default SlideBar\r\n","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport AntdIcon, { BorderOutlined } from '@ant-design/icons'\r\n\r\ninterface IconProps {\r\n    prefixClass?: string;\r\n    type?: any;\r\n    className?: string;\r\n    children?: React.ReactNode;\r\n    font: string;\r\n    antd: string;\r\n    spin?: boolean\r\n}\r\n\r\nconst Icon:React.FC<IconProps> = (props) => {\r\n    const {prefixClass, type, className, children, font, antd, spin, ...argument} = props\r\n    const classname = classnames(\r\n        prefixClass,\r\n        {\r\n            [font]: font,\r\n            [`${font}-${type}`]: font && type,\r\n            spin\r\n        },\r\n        className\r\n    )\r\n    if (/^&#x.+;$/.test(type)) {\r\n        return (\r\n            <i\r\n                className={classname}\r\n                {...props}\r\n                dangerouslySetInnerHTML={{ __html: type }}\r\n            />\r\n        );\r\n    }\r\n    if(antd) {\r\n        const antdClass = classnames(prefixClass, className)\r\n        if (typeof type === 'string') {\r\n            const Icons = require('@ant-design/icons')[type] || BorderOutlined\r\n            return <Icons className={antdClass} spin={spin} {...props} />;\r\n        }\r\n        if(React.isValidElement(type)) {\r\n            return (\r\n                <AntdIcon\r\n                    component={() => type}\r\n                    className={antdClass}\r\n                    spin={spin}\r\n                    {...props}\r\n                />\r\n            );\r\n        }\r\n    }\r\n    return(\r\n        <i className={className} {...argument}>\r\n            {children}\r\n        </i>\r\n    )\r\n}\r\n\r\nexport default Icon\r\n","import React from 'react'\r\nimport {Avatar, Dropdown, Menu} from 'antd'\r\nimport {LogoutOutlined, GithubOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {getStorage} from \"@/utils/storageUtil\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\n\r\n\r\nconst {Item, Divider} = Menu\r\n\r\nconst AvatarDropdown: React.FC<{dispatch: Dispatch}> = (prop) => {\r\n    const {dispatch} = prop\r\n\r\n    const avatarName = getStorage('roles')\r\n\r\n    const menuDropdown = (\r\n        <Menu onClick={({key}) => {\r\n            switch (key) {\r\n                case 'logout':\r\n                    dispatch({\r\n                        type: 'login/Logout'\r\n                    })\r\n                    return false;\r\n                default:\r\n                    return false\r\n            }\r\n        }}>\r\n            <Item key='center'>\r\n                <UserOutlined/>\r\n                个人中心\r\n            </Item>\r\n            <Item key='github'>\r\n                <GithubOutlined/>\r\n                GitHub地址\r\n            </Item>\r\n            <Divider/>\r\n            <Item key='logout'>\r\n                <LogoutOutlined/>\r\n                退出登录\r\n            </Item>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <Dropdown overlay={menuDropdown} className='avatar-dropdown'>\r\n            <span className='avatar-dropdown-action'>\r\n                <Avatar size=\"small\" className='avatar-dropdown-avatar' src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt='头像'/>\r\n                <span>\r\n                    {avatarName as React.ReactNode}\r\n                </span>\r\n            </span>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nexport default AvatarDropdown\r\n","import React, {useState, useEffect} from 'react'\r\nimport classnames from 'classnames'\r\nimport './styles/index.less'\r\nimport {Icon, FullScreenIcon, Breadcrumb} from '@/components'\r\nimport AvatarDropdown from \"@/components/header/AvatarDropdown\";\r\nimport {GlobalFullScreen} from \"@/utils/fullScreen\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\n\r\ninterface GlobalHeaderProp extends DefaultReactNodeProps{\r\n    setCollapsed: React.ReactEventHandler;\r\n    collapsed: boolean;\r\n    dispatch: Dispatch;\r\n}\r\n\r\nconst GlobalHeader: React.FC<GlobalHeaderProp> = (prop) => {\r\n    const {setCollapsed, collapsed, dispatch, location} = prop\r\n    const classname = classnames('ant-header')\r\n    const [fullscreen, setFullscreen] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        document.onfullscreenchange = () => {\r\n            setFullscreen(!!document.fullscreenElement);\r\n        };\r\n    }, []);\r\n    return(\r\n        <div className={classname}>\r\n\r\n            <span className='ant-header-trigger' onClick={setCollapsed}>\r\n                <Icon type={collapsed ? 'MenuUnfoldOutlined' : 'MenuFoldOutlined'} antd='true' font=''/>\r\n            </span>\r\n\r\n            <Breadcrumb location={location}/>\r\n\r\n            <div className='ant-header-right'>\r\n                <span className='avatar-dropdown avatar-dropdown-action'\r\n                      onClick={() => {\r\n                          GlobalFullScreen(document.documentElement)\r\n                          setFullscreen(!document.fullscreenElement)\r\n                      }}\r\n                >\r\n                   <FullScreenIcon fullscreen={fullscreen} />\r\n                </span>\r\n                <AvatarDropdown dispatch={dispatch}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default GlobalHeader\r\n","export function GlobalFullScreen(element: HTMLElement | any) {\r\n    if (!document.fullscreenElement) {\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        } else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n        } else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n        } else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullScreen();\r\n        }\r\n    } else if (document.fullscreenElement) {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if ((document as any).msExitFullscreen) {\r\n            (document as any).msExitFullscreen();\r\n        } else if ((document as any).mozCancelFullScreen) {\r\n            (document as any).mozCancelFullScreen();\r\n        } else if ((document as any).webkitExitFullscreen) {\r\n            (document as any).webkitExitFullscreen();\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { FullscreenExitOutlined, FullscreenOutlined } from '@ant-design/icons';\r\nimport { Tooltip } from 'antd';\r\n\r\ninterface FullScreenIconProp {\r\n    fullscreen: boolean;\r\n}\r\n\r\nconst FullScreenIcon: React.FC<FullScreenIconProp> = (prop) => {\r\n    const {fullscreen} = prop\r\n\r\n    return fullscreen\r\n        ?\r\n        (<Tooltip title='退出全屏'>\r\n            <FullscreenExitOutlined />\r\n        </Tooltip>)\r\n        :\r\n        (<Tooltip title='全屏'>\r\n            <FullscreenOutlined />\r\n        </Tooltip>)\r\n}\r\n\r\nexport default FullScreenIcon\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Breadcrumb} from 'antd'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst {Item} = Breadcrumb\r\n\r\nfunction getRouterPath(pathName: string) {\r\n    const orderPath: Array<string> = []\r\n    pathName.split('/').reduce((prev: string, next: string) => {\r\n        const path = [prev, next].join('/');\r\n        orderPath.push(path);\r\n        return path;\r\n    })\r\n    return orderPath\r\n        .map(item => window.hyoukaRouterPath[item])\r\n        .filter(item => item)\r\n}\r\n\r\nconst BreadcrumbAvatar: React.FC<DefaultReactNodeProps> = (prop) => {\r\n    const {location} = prop\r\n    const [currentRoute, setCurrentRoute] = useState<Array<any>>([])\r\n    useEffect(() => {\r\n        setCurrentRoute(getRouterPath(location.pathname))\r\n    },[location])\r\n    return (\r\n       <div>\r\n           {\r\n               currentRoute.length\r\n                   ?\r\n                   (\r\n                       <Breadcrumb>\r\n                           <Item>\r\n                               <Link to='/'>\r\n                                   首页\r\n                               </Link>\r\n                           </Item>\r\n                           {\r\n                               currentRoute.map((item) => (\r\n                                   <Item key={item.path}>\r\n                                       <span>\r\n                                           {item.meta.title}\r\n                                       </span>\r\n                                   </Item>\r\n                               ))\r\n                           }\r\n                       </Breadcrumb>\r\n                   )\r\n                   :\r\n                   null\r\n           }\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default BreadcrumbAvatar\r\n","import React, {useState, useEffect} from 'react'\r\nimport {getStorage} from \"@/utils/storageUtil\";\r\nimport {useHistory, Switch} from 'react-router-dom'\r\nimport classnames from 'classnames'\r\nimport {Layout} from 'antd'\r\nimport {SwitchTransition, CSSTransition} from 'react-transition-group';\r\nimport {SlideBar, GlobalHeader} from '@/components'\r\nimport {connect} from 'dva'\r\nimport {Dispatch} from \"@/utils/Effect\";\r\nimport {ConnectState} from \"@/models/connect\";\r\nimport './styles/basic.less'\r\n\r\nconst {Content, Header} = Layout;\r\n\r\n\r\ninterface BasicLayoutProp {\r\n    collapsedLeftSide: boolean;\r\n    leftCollapsedWidth: number;\r\n    expandTopBar: boolean;\r\n    showSidebarHeader: boolean;\r\n    collapsedRightSide: boolean;\r\n    currentMenu: object;\r\n    isMobile: boolean;\r\n    layout?: object;\r\n    menu: Array<MenuProp>;\r\n    dispatch: Dispatch\r\n}\r\n\r\nconst BasicLayout: React.FC<DefaultReactNodeProps & BasicLayoutProp> = (prop) => {\r\n    const {location, renderChildren, dispatch, menu} = prop\r\n    const {children} = renderChildren\r\n    const [collapsedLeftSide, setCollapsed] = useState<boolean>(false)\r\n    const history = useHistory()\r\n    const [roles] = useState<string | unknown>(getStorage('roles'))\r\n    const [theme] = useState<{ leftSide: string; navBar: string; layout?: Array<string> }>({\r\n        leftSide: 'darkgrey', // 左边\r\n        navBar: 'light', // 顶部\r\n        ...getStorage('theme') as Array<string>\r\n    })\r\n    const classname = classnames('basic-layout', 'full-layout', {\r\n        'fixed': theme.layout && theme.layout.indexOf('fixedSidebar') !== -1,\r\n        'fixed-header': theme.layout && theme.layout.indexOf('fixedHeader') !== -1,\r\n        'fixed-breadcrumbs': theme.layout && theme.layout.indexOf('fixedBreadcrumbs') !== -1,\r\n        'hided-breadcrumbs': theme.layout && theme.layout.indexOf('hidedBreadcrumbs') !== -1,\r\n    })\r\n    useEffect(() => {\r\n        (() => {\r\n            if (!roles) {\r\n                history.push({\r\n                    pathname: '/user/login'\r\n                })\r\n            }\r\n        })()\r\n\r\n        if (!theme.layout) {\r\n            theme.layout = [\r\n                'fixedHeader',\r\n                'fixedSidebar',\r\n                'fixedBreadcrumbs'\r\n            ];\r\n        }\r\n\r\n        dispatch({\r\n            type: 'global/getMenu',\r\n        })\r\n    }, [roles, history, theme, dispatch])\r\n\r\n    return (\r\n        <Layout className={classname}>\r\n\r\n            <Layout>\r\n\r\n                <SlideBar menu={menu}  themeClass={theme.leftSide} collapsedLeftSide={collapsedLeftSide}/>\r\n\r\n                <Content style={{overflow: 'hidden'}}>\r\n\r\n                    <Layout className=\"full-layout\">\r\n\r\n                        <Header>\r\n                            <GlobalHeader location={location} dispatch={dispatch} collapsed={collapsedLeftSide} setCollapsed={() => {setCollapsed(!collapsedLeftSide)}}/>\r\n                        </Header>\r\n\r\n                        <SwitchTransition>\r\n                            <CSSTransition\r\n                                key={location.pathname}\r\n                                classNames=\"fade\"\r\n                                timeout={500}\r\n                            >\r\n                                <Content className=\"router-page\">\r\n                                    <Switch location={location}>{children}</Switch>\r\n                                </Content>\r\n                            </CSSTransition>\r\n                        </SwitchTransition>\r\n                    </Layout>\r\n\r\n                </Content>\r\n\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\nexport default connect(({global, login}: ConnectState) => ({\r\n    menu: global.asyncMenu,\r\n    login\r\n}))(BasicLayout)\r\n","import React, {useState} from 'react'\r\nimport {Layout} from 'antd'\r\nimport {Spin, Form, Input, Button, Checkbox} from 'antd'\r\nimport './index.less'\r\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\r\nimport {connect} from 'dva'\r\nimport {ConnectState} from \"@/models/connect\";\r\nimport {Dispatch} from \"@/utils/Effect\";\r\nimport {LoginState} from \"@/models/login\";\r\n\r\ninterface LoginProps {\r\n    dispatch: Dispatch;\r\n    formLogin: LoginState\r\n}\r\n\r\nconst {Content} = Layout\r\nconst {Item} = Form\r\n\r\nconst Login: React.FC<LoginProps & DefaultReactNodeProps> = (props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const handlerSubmit = (values: {username:  \"admin\" | \"user\" | \"Hyouka\"; password: string}) => {\r\n        const {dispatch} = props\r\n        dispatch({\r\n            type: 'login/Login',\r\n            payload: {...values}\r\n        })\r\n        setLoading(true)\r\n    }\r\n    return(\r\n        <Layout className=\"full-layout login-page\">\r\n            <Content>\r\n                <Spin tip='登陆中...' spinning={loading}>\r\n                    <Form className=\"login-form\" onFinish={handlerSubmit}>\r\n                        <div className='user-img'>\r\n                            <img src='https://hyoukam.github.io/react-antd-admin/public/Athena.jpg' alt=\"logo\"/>\r\n                            <b>HYOUKA</b>\r\n                            <span>-</span>\r\n                            <span>Admin</span>\r\n                        </div>\r\n                        <Item name='username' rules={[{ required: true, message: '请输入您的用户名，示例admin' }]}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<UserOutlined />}\r\n                                placeholder=\"用户名\"\r\n                            />\r\n                        </Item>\r\n                        <Item name='password' rules={[{ required: true, message: '请输入您的密码，示例admin' }]}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                prefix={<LockOutlined />}\r\n                                type=\"password\"\r\n                                placeholder=\"密码\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                            <Checkbox>记住我</Checkbox>\r\n                        </Item>\r\n                        <a className=\"login-form-forgot\" href=\"/\">\r\n                            忘记密码\r\n                        </a>\r\n                        <Item>\r\n                            <Button size=\"large\" className=\"login-form-button\" type={'primary'} htmlType={'submit'}>\r\n                                登陆\r\n                            </Button>\r\n                        </Item>\r\n                        <div className=\"new-user\">\r\n                            新用户？<a href='/'>现在注册</a>\r\n                        </div>\r\n                    </Form>\r\n                </Spin>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\nexport default connect(({ login }: ConnectState) => ({\r\n    formLogin: login,\r\n}))(Login);\r\n","import React from 'react'\r\n\r\nconst Dashboard = () => {\r\n    return(\r\n        <div>\r\n            首页\r\n        </div>\r\n    )\r\n}\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport {history} from \"@/utils/history\";\r\nimport { Button, Result } from 'antd';\r\n\r\n\r\nconst NotFound: React.FC = () => {\r\n    return(\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"Sorry, the page you visited does not exist.\"\r\n            extra={\r\n                <Button type=\"primary\" onClick={() => history.push('/')}>\r\n                    Back Home\r\n                </Button>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import {createRouter} from \"@/utils/core.tsx\";\r\nimport {BasicLayout, UserLayout} from '@/layout'\r\nimport {Dashboard, Login, NotFound} from \"@/views\";\r\n\r\n/**\r\n * 这里就是路由表 就不说了 这不过这里是函数return的没太大意义最关键的是下面的createRouter\r\n */\r\nconst asyncRoute = (): Array<RouteConfig> => [\r\n    {\r\n        path: '/user',\r\n        component:UserLayout,\r\n        meta: {\r\n          title: '登陆'\r\n        },\r\n        redirect: '/user/login',\r\n        children: [\r\n            {\r\n                meta: {\r\n                    title: '登陆'\r\n                },\r\n                path: '/user/login',\r\n                component: Login\r\n            },\r\n            {\r\n                meta: {\r\n                    title: '错误页面'\r\n                },\r\n                path: '/user/notfound',\r\n                component: NotFound\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/',\r\n        component: BasicLayout,\r\n        meta: {\r\n            title: '首页'\r\n        },\r\n        redirect: '/dashboard',\r\n        children: [\r\n            {\r\n                meta: {\r\n                  title: '默认页'\r\n                },\r\n                path: '/dashboard',\r\n                component: Dashboard,\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport default () => createRouter(asyncRoute)\r\n\r\n","import React from 'react';\nimport {Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport '@/assets/styles/index.less'\nimport createRoutes from \"@/router/routes\";\nimport dva from 'dva'\nimport {history} from \"@/utils/history\";\n\nconst app = dva({history})\n\napp.model(require('@/models/login').default)\napp.model(require('@/models/global').default)\n\napp.router(({history}: any) => {\n    return(\n        <Router history={history}>{createRoutes()}</Router>\n    )\n})\n\napp.start('#root');\n\nserviceWorker.unregister();\n","interface LoginProp {\r\n    username: 'admin' | 'user' | 'Hyouka';\r\n    password: any,\r\n}\r\n\r\ntype LoginState = {roles: string}\r\n\r\nexport const LoginApi = (data: LoginProp): Promise<LoginState> => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve({roles: '管理员', ...data})\r\n        reject('登陆失败')\r\n    })\r\n}\r\n","import {Effect} from \"@/utils/Effect\";\r\nimport {Reducer} from 'redux'\r\nimport {LoginApi} from \"@/api/login\";\r\nimport {clearStotage, setStorage} from \"@/utils/storageUtil\";\r\nimport {history} from \"@/utils/history\";\r\n\r\nexport interface LoginState {\r\n    username: string | number;\r\n    password: string;\r\n    remember?: undefined | boolean;\r\n}\r\n\r\ninterface LoginType {\r\n    namespace: 'login';\r\n    state: LoginState;\r\n    effects: {\r\n        Login: Effect;\r\n        Logout: Effect;\r\n    },\r\n    reducers: {\r\n        changeState: Reducer<LoginState>\r\n    }\r\n}\r\n\r\nconst loginModel: LoginType = {\r\n    namespace: \"login\",\r\n    state: {\r\n        username: '',\r\n        password: '',\r\n        remember: undefined\r\n    },\r\n    effects: {\r\n        * Login({payload}, {put, call}) {\r\n            const response = yield call(LoginApi, payload)\r\n            yield put({\r\n                type: 'changeState',\r\n                payload: response\r\n            })\r\n            if(Object.keys(response).length > 0) {\r\n                const {roles} = response\r\n                yield setStorage('roles', roles)\r\n                yield history.replace({\r\n                    pathname: '/'\r\n                })\r\n            }\r\n        },\r\n        * Logout() {\r\n            yield history.replace({\r\n                pathname: '/user/login'\r\n            })\r\n            yield clearStotage()\r\n        }\r\n    },\r\n    reducers: {\r\n        changeState(state, {payload}) {\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default loginModel\r\n","export const getMenu = (): Promise<Array<MenuProp>> => {\r\n    return new Promise((resolve) => {\r\n        const menu = [\r\n            {\r\n                meta: {\r\n                    title: '首页',\r\n                },\r\n                path: '/dashboard',\r\n                icon: 'DashboardOutlined',\r\n            },\r\n            {\r\n                meta: {\r\n                    title: '首页1',\r\n                },\r\n                path: '/dashboard1',\r\n                icon: 'DashboardOutlined',\r\n            },\r\n        ]\r\n        resolve(menu)\r\n    })\r\n}\r\n","import {Effect} from \"@/utils/Effect\";\r\nimport {Reducer} from 'redux'\r\nimport {getMenu} from \"@/api/basicApi\";\r\n\r\nexport interface GlobalState {\r\n    asyncMenu: Array<RouteConfig> | []\r\n}\r\n\r\ninterface GlobalType {\r\n    namespace: 'global';\r\n    state: GlobalState;\r\n    effects: {\r\n        getMenu: Effect\r\n    },\r\n    reducers: {\r\n        changeMenu: Reducer<GlobalState>\r\n    }\r\n}\r\n\r\nconst global: GlobalType = {\r\n    namespace: \"global\",\r\n    state: {\r\n        asyncMenu: []\r\n    },\r\n    effects: {\r\n        /**\r\n         *\r\n         * @param payload state?: any\r\n         * @param put action: Reducer\r\n         * @param call 调用函数\r\n         * 在这里处理你的权限管理\r\n         */\r\n        * getMenu({payload}, {put, call}) {\r\n            const menu = yield call(getMenu, payload)\r\n            if (menu.length > 0) {\r\n                yield put({\r\n                    type: 'changeMenu',\r\n                    payload: menu\r\n                })\r\n            }\r\n        }\r\n    },\r\n    reducers: {\r\n        changeMenu(state, {payload}) {\r\n            return {\r\n                ...state,\r\n                asyncMenu: payload\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default global\r\n","import {createBrowserHistory} from 'history'\r\n\r\nconst options = {\r\n    basename: '/'\r\n}\r\n\r\nif ((window as any).routerBase) {\r\n    options.basename = (window as any).routerBase;\r\n}\r\n\r\nconst history = createBrowserHistory(options)\r\n\r\nexport {\r\n    history\r\n}\r\n"],"sourceRoot":""}